
:alias pass_value v0
:alias left_digit v1
:alias right_digit v2
:alias old_digit v1
:alias new_digit v2
:alias ticks_since_last_frame v9
:alias carry_column va
:alias no_erase_flag vb
:alias tile_size vc
:alias iterator vc
:alias px vd
:alias py ve

:const stride 4
:const numwidth 10
:const numwidth_minus_one 9

:const line_y 24
:const time_x 1
:const time_y 26
:const young_label_x 12
:const young_label_y 27
:const bignum_x 24
:const bignum_y 26

: draw_bignum
    px := bignum_x
    py := bignum_y
    iterator := 0

    loop
        # load old digit
        i := old_result
        i += iterator
        load v0
        old_digit := v0

        # load new_digit
        i := result
        i += iterator
        load v0
        new_digit := v0


        # if flag is non-zero we only draw the new digit and don't check if we should erase
        if no_erase_flag != 0 begin
            # draw new digit
            pass_value := new_digit
            :call 3_by_5_font_i
            sprite px py 5
        else
            # only update digit if we need to
            if old_digit != new_digit begin
                # erase old digit
                pass_value := old_digit
                :call 3_by_5_font_i
                sprite px py 5
                # draw new digit
                pass_value := new_digit
                :call 3_by_5_font_i
                sprite px py 5
            end
        end

        # move over to next digit
        px += stride

        # increment iterator and go again if not finished
        iterator += 1
        if iterator != numwidth begin
            again
        end

return


: sub_bignum
    iterator := numwidth_minus_one
    carry_column := 0

    loop
        # load digit for left operand
        i := left_operand
        i += iterator
        load v0
        left_digit := v0

        # load digit for right operand
        i := right_operand
        i += iterator
        load v0
        right_digit := v0

        # set i to point to current column of result
        i := result
        i += iterator

        # sub digits and carry column together
        left_digit -= right_digit
        left_digit -= carry_column

        # sort out carry by adding to carry column until the current column is
        # under 0 (>= 255 after underflow)
        carry_column := 0
        if left_digit >= 246 begin
            loop
                carry_column += 1
                left_digit += 10
                if left_digit >= 246 begin
                    again
                end
        end

        # save digit to result
        v0 := left_digit
        save v0

        # prevent underflow by flooring at all zeroes if we would carry on the first column
        if iterator == 0 begin
            if carry_column > 0 begin
                i := min_bignum
                load v9
                i := result
                save v9
            end
        end

        # check if we're finished
        if iterator != 0 begin
            iterator -= 1
            again
        end
return


: add_bignum
    iterator := numwidth_minus_one
    carry_column := 0

    loop
        # load digit for left operand
        i := left_operand
        i += iterator
        load v0
        left_digit := v0

        # load digit for right operand
        i := right_operand
        i += iterator
        load v0
        right_digit := v0

        # set i to point to current column of result
        i := result
        i += iterator

        # add digits and carry column together
        left_digit += right_digit
        left_digit += carry_column

        # sort out carry by adding to carry column until the current column is under 10
        carry_column := 0
        if left_digit > 9 begin
            loop
                carry_column += 1
                left_digit -= 10
                if left_digit > 9 begin
                    again
                end
        end

        # save digit to result
        v0 := left_digit
        save v0

        # prevent overflow by capping at all nines if we would carry on the first column
        if iterator == 0 begin
            if carry_column > 0 begin
                i := max_bignum
                load v9
                i := result
                save v9
            end
        end

        # check if we're finished
        if iterator != 0 begin
            iterator -= 1
            again
        end
return


: hex_font_i
    i := hex v0
return

: 3_by_3_font_i
    i := 3_by_3_font_index
    i += pass_value
    load v0
    i := 3_by_3_font
    i += v0
return

: 3_by_3_font_index
    0 3 6 9 12 15 18 21 24 27

: 3_by_3_font
    0xE0 0xA0 0xE0 #zero
    0xC0 0x40 0xE0 #one
    0xC0 0x40 0x60 #two
    0xE0 0x60 0xE0 #three
    0xA0 0xE0 0x20 #four
    0x60 0x40 0xC0 #five
    0x80 0xE0 0xE0 #six
    0xE0 0x20 0x20 #seven
    0x60 0xE0 0xE0 #eight
    0xE0 0xE0 0x20 #nine

: 3_by_5_font_i
    i := 3_by_5_font_index
    i += pass_value
    load v0
    i := 3_by_5_font
    i += v0
return

: 3_by_5_font_index
    0 5 10 15 20 25 30 35 40 45

: 3_by_5_font
    0xE0 0xA0 0xA0 0xA0 0xE0 #zero
    0xC0 0x40 0x40 0x40 0xE0 #one
    0xE0 0x20 0xE0 0x80 0xE0 #two
    0xE0 0x20 0xE0 0x20 0xE0 #three
    0xA0 0xA0 0xE0 0x20 0x20 #four
    0xE0 0x80 0xE0 0x20 0xE0 #five
    0xE0 0x80 0xE0 0xA0 0xE0 #six
    0xE0 0xA0 0x20 0x40 0x40 #seven
    0xE0 0xA0 0xE0 0xA0 0xE0 #eight
    0xE0 0xA0 0xE0 0x20 0xE0 #nine

: tick_count
    0
: min_bignum
    0 0 0 0 0 0 0 0 0 0
: max_bignum
    9 9 9 9 9 9 9 9 9 9
: left_operand
    0 0 0 0 0 0 0 0 0 0
: right_operand
    0 0 0 0 0 0 0 0 0 0
: old_result
    0 0 0 0 0 0 0 0 0 0
: result
    0 0 0 0 0 0 0 0 0 0
: bcd_smallnum
    0 0 0

: min_smallnum
    0
: max_smallnum
    99

: timers
    # These are in the following order:
    # Key Q
    # Key W
    # Key E
    # Key A
    # Key S
    # Key D
    # Timer Accumulator
    # Global Countdown Timer
    0 0 0 0 0 0 0 88

# The data in each count block acts as kind of a struct for tese aliases
:alias current_count v0
:alias old_count v1
:alias display_flag v2
:alias sprite_x v3
:alias sprite_y v4
:alias count_x v5
:alias count_y v6
:alias max_resource v7

: count_emerson
    01 00 00 01 01 12 04 42
: sprite_emerson
    0xDF 0x95 0xD5 0x95 0xD1 0x00 0xDB 0x95 0x95 0xB5
: count_lake
    01 00 00 23 01 33 04 23
: sprite_lake
    0x80 0x80 0x80 0x80 0xE0 0x09 0x0A 0x0C 0x0A 0x09
: count_palmer
    00 00 00 45 01 55 04 16
: sprite_palmer
    0xE8 0xA8 0xE8 0x88 0x8E 0x00 0xF3 0xAA 0xAA 0x8A
: count_crosby
    00 00 00 01 13 12 16 15
: sprite_crosby
    0xEE 0x89 0x8E 0xE9 0x00 0xEE 0x89 0xEE 0x29 0xEE
: count_stills
    00 00 00 23 13 33 16 50
: sprite_stills
    0xEE 0x84 0xE4 0x24 0xE0 0x0E 0x88 0x8E 0x82 0xEE
: count_nash
    00 00 00 45 13 55 16 99
: sprite_nash
    0x62 0x52 0x4A 0x46 0x00 0xE9 0x89 0xEF 0x29 0xE9
: sprite_young_y
    0xA0 0xE0 0x40 0x40
: sprite_young_n
    0x60 0xA0 0xA0 0xA0
: sprite_young_g
    0xC0 0x80 0xA0 0xE0
: sprite_time_t
    0xE0 0x40 0x40 0x40
: sprite_line
    0xFF

: draw_resource
    # check if we should initialize resource
    if display_flag == 0 begin
        if current_count > 0 begin
            # draw marker sprite
            sprite v3 v4 10
            display_flag := 1
            # draw first count
            v8 := current_count
            old_count := current_count
            px := count_x
            py := count_y
            :call draw_smallnum
            # save new data
            current_count := v8
            old_count := v8
            return
        end
    end

    # check if we should update the number
    if current_count != old_count begin
        # save current count so it doesn't get stomped
        v8 := current_count
        # erase old count
        px := count_x
        py := count_y
        :call draw_smallnum
        # draw new count
        v1 := v8
        px := count_x
        py := count_y
        :call draw_smallnum
        # save new data
        current_count := v8
        old_count := v8
    end
return

: draw_smallnum
    i := bcd_smallnum
    bcd v1
    load v0
    load v0
    :call 3_by_5_font_i
    sprite px py 5
    px += stride
    i := bcd_smallnum
    v1 := 2
    i += v1
    load v0
    :call 3_by_5_font_i
    sprite px py 5
return

: draw_fullscreen_tiles
    py := 0
    tile_size := 8
    loop
        :call draw_fullscreen_tile_row
        py += tile_size
        if py < 32 begin
            again
        end
return

: draw_fullscreen_tile_row
    px := 0
    loop
        sprite px py 8
        px += 8
        i += tile_size
        if px < 64 begin
            again
        end
return

: title_screen
    # display title screen
    i := sprite_title_screen
    :call draw_fullscreen_tiles

    # wait for any key press
    va := OCTO_KEY_W
    vb := 30
    i := sprite_title_exclamation
    px := 60
    py := 2
    loop
        # check for key press
        if va key begin
            # erase the screen
            clear
            return
        end
        # blink exclamation point on delay if no key press
        v0 := delay
        if v0 == 0 begin
            delay := vb
            sprite px py 8
        end
        again
return

:stringmode text8 "ABCDEFGHIJKLMNOPQRSTUVWXYZ !" {
	:byte { 5 * VALUE }
}

: sprite_alphabet_font
    0xE0 0xA0 0xE0 0xA0 0xA0 #A
    0xC0 0xA0 0xE0 0xA0 0xC0 #B
    0xE0 0xA0 0x80 0xA0 0xE0 #C
    0xC0 0xA0 0xA0 0xA0 0xC0 #D
    0xE0 0x80 0xE0 0x80 0xE0 #E
    0xE0 0x80 0xE0 0x80 0x80 #F
    0xC0 0x80 0xA0 0xA0 0xE0 #G
    0xA0 0xA0 0xE0 0xA0 0xA0 #H
    0xE0 0x40 0x40 0x40 0xE0 #I
    0x20 0x20 0x20 0xA0 0xE0 #J
    0xA0 0xA0 0xC0 0xA0 0xA0 #K
    0x80 0x80 0x80 0x80 0xE0 #L
    0xA0 0xE0 0xE0 0xA0 0xA0 #M
    0x60 0xA0 0xA0 0xA0 0xA0 #N
    0xE0 0xA0 0xA0 0xA0 0xE0 #O
    0xE0 0xA0 0xE0 0x80 0x80 #P
    0xE0 0xA0 0xA0 0xC0 0x20 #Q
    0xC0 0xA0 0xC0 0xA0 0xA0 #R
    0xE0 0x80 0xE0 0x20 0xE0 #S
    0xE0 0x40 0x40 0x40 0x40 #T
    0xA0 0xA0 0xA0 0xA0 0xE0 #U
    0xA0 0xA0 0xA0 0xA0 0x40 #V
    0xA0 0xA0 0xE0 0xE0 0xA0 #W
    0xA0 0xA0 0x40 0xA0 0xA0 #X
    0xA0 0xA0 0xE0 0x40 0x40 #Y
    0xE0 0x20 0x40 0x80 0xE0 #Z
    0x00 0x00 0x00 0x00 0x00 #
    0x40 0x40 0x40 0x00 0x40 #!

: game_ending
    clear

    # draw line
    px := 0
    py := line_y
    i := sprite_line
    loop
        sprite px py 1
        px += 8
        if px != 64 begin
            again
        end

    # draw the sprite for young count
    px := young_label_x
    py := young_label_y
    i := sprite_young_y
    sprite px py 4
    px += 4
    i := sprite_young_n
    sprite px py 4
    px += 4
    i := sprite_young_g
    sprite px py 4

    # draw final score
    i := result
    no_erase_flag := 1
    :call draw_bignum
    no_erase_flag := 0

    # stack up final resource counts
    i := count_nash
    load v0
    v5 := v0
    i := count_stills
    load v0
    v4 := v0
    i := count_crosby
    load v0
    v3 := v0
    i := count_palmer
    load v0
    v2 := v0
    i := count_lake
    load v0
    v1 := v0
    i := count_emerson
    load v0

    # you win
    if v5 > 1 begin
        :call end_you_win
    end

    # find nash
    if v4 > 0 begin
        if v5 == 0 begin
            :call end_min_nash
        end
    end

    # find crosby
    if v3 == 1 begin
        :call end_min_crosby
    end

    # try hitting e
    if v1 > 20 begin
        :call end_max_lake
    end

    # try hitting w
    if v0 > 40 begin
        :call end_max_emersons
    end

    # try hitting q
    :call end_game_over


: ending_text_you_win
    text8 "UNIVERSE SAVED"
: end_you_win
    px := 5
    py := 9
    iterator := 0
    loop
        i := ending_text_you_win
        i += iterator
        load v0
        i := sprite_alphabet_font
        i += v0
        sprite px py 5
        iterator += 1
        px += 4
        if iterator != 14 then again

    loop
        again
return

: ending_text_min_nash
    text8 "FIND NASH!"
: end_min_nash
    px := 14
    py := 9
    iterator := 0
    loop
        i := ending_text_min_nash
        i += iterator
        load v0
        i := sprite_alphabet_font
        i += v0
        sprite px py 5
        iterator += 1
        px += 4
        if iterator != 10 then again

    loop
        again
return

: ending_text_min_crosby
    text8 "FIND CROSBY!"
: end_min_crosby
    px := 9
    py := 9
    iterator := 0
    loop
        i := ending_text_min_crosby
        i += iterator
        load v0
        i := sprite_alphabet_font
        i += v0
        sprite px py 5
        iterator += 1
        px += 4
        if iterator != 12 then again

    loop
        again
return

: ending_text_max_lake
    text8 "E KEY GO BRRR!"
: end_max_lake
    px := 5
    py := 9
    iterator := 0
    loop
        i := ending_text_max_lake
        i += iterator
        load v0
        i := sprite_alphabet_font
        i += v0
        sprite px py 5
        iterator += 1
        px += 4
        if iterator != 14 then again

    loop
        again
return

: ending_text_max_emersons
    text8 "HIT W TOO THO!"
: end_max_emersons
    px := 5
    py := 9
    iterator := 0
    loop
        i := ending_text_max_emersons
        i += iterator
        load v0
        i := sprite_alphabet_font
        i += v0
        sprite px py 5
        iterator += 1
        px += 4
        if iterator != 14 then again

    loop
        again
return

: ending_text_game_over
    text8 "TRY HITTING Q!"
: end_game_over
    px := 6
    py := 9
    iterator := 0
    loop
        i := ending_text_game_over
        i += iterator
        load v0
        i := sprite_alphabet_font
        i += v0
        sprite px py 5
        iterator += 1
        px += 4
        if iterator != 14 then again

    loop
        again
return

: sprite_title_screen
    0xFF 0x80 0x80 0x80 0x80 0x87 0x8C 0x98 0xFF 0x00 0x00 0x00 0x00 0x80 0xC0 0x40 0xFF 0x00 0x00 0x40 0x40 0x40 0x40 0x40 0xFE 0x03 0x01 0x00 0x00 0x00 0x04 0x04
    0x7F 0xC0 0x80 0x00 0x00 0x20 0x20 0x20 0xFF 0x00 0x00 0x00 0x00 0x00 0x38 0x28 0xFF 0x80 0xA8 0xBA 0xAA 0x80 0x84 0xC5 0xFF 0x01 0xED 0x4D 0x4D 0x0D 0x4D 0x41
    0x90 0x90 0x90 0x99 0x8F 0x80 0xC0 0x60 0x54 0x5C 0xDD 0x97 0x00 0x00 0x00 0x00 0x40 0x68 0x2C 0x26 0x23 0x21 0x01 0x05 0x84 0x87 0x9E 0x82 0x82 0x02 0x02 0x02
    0x6C 0xEE 0x3A 0x33 0x11 0x11 0x10 0x00 0x38 0xF0 0x21 0x2F 0x38 0xC0 0x00 0x00 0x62 0x38 0x0F 0x00 0x00 0x00 0x00 0x00 0x8D 0x0D 0x81 0xFF 0x01 0x01 0x03 0x06
    0x60 0xC0 0x80 0x80 0x9E 0x92 0x96 0x9E 0x00 0x00 0x00 0x00 0x6E 0xAA 0xEE 0x00 0x07 0x00 0x20 0x20 0xE0 0xA0 0xA0 0xE1 0x00 0x00 0x00 0x00 0x20 0x20 0x2B 0xE2
    0x00 0x00 0x08 0x0C 0x06 0x03 0x81 0x80 0x00 0x23 0x25 0x25 0x65 0x45 0xC0 0xBA 0x00 0x6E 0x44 0x64 0x44 0x6E 0x00 0xBB 0x06 0x83 0x81 0x81 0x81 0xE1 0x01 0x81
    0x82 0x82 0x92 0x9E 0x80 0x80 0x80 0xFF 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0x01 0x01 0x01 0x01 0x00 0x00 0x00 0xFF 0x2B 0x2A 0x2B 0xE0 0x00 0x01 0x03 0xFE
    0x80 0x10 0xF0 0x00 0x00 0x80 0xC0 0x7F 0xAA 0xAA 0xAA 0xBB 0x00 0x00 0x00 0xFF 0xAA 0xAA 0xAA 0xAB 0x00 0x00 0x00 0xFF 0x01 0xC1 0x41 0xC1 0x01 0x01 0x01 0xFF

: sprite_title_exclamation
    0xC0 0xC0 0xC0 0xC0 0xC0 0x00 0xC0 0xC0

: main
    :call title_screen

    # increase the cooldown for the W key so it doesn't cause problems by
    # having been pressed on the title screen
    i := timers
    v1 := 10
    save v6

    # initialize delay
    v0 := 255
    delay := v0

    # Initialize score to 000
    i := result
    no_erase_flag := 1
    :call draw_bignum
    no_erase_flag := 0

    # initialize resource counts
    i := count_emerson
    load v7
    :call draw_resource
    i := count_emerson
    save v7

    i := count_lake
    load v7
    :call draw_resource
    i := count_lake
    save v7

    i := count_palmer
    load v7
    :call draw_resource
    i := count_palmer
    save v7

    i := count_crosby
    load v7
    :call draw_resource
    i := count_crosby
    save v7


    i := count_stills
    load v7
    :call draw_resource
    i := count_stills
    save v7

    i := count_nash
    load v7
    :call draw_resource
    i := count_nash
    save v7

    # draw line
    px := 0
    py := line_y
    i := sprite_line
    loop
        sprite px py 1
        px += 8
        if px != 64 begin
            again
        end

    #initialize time
    i := timers
    load v7
    v1 := v7
    px := time_x
    py := time_y
    :call draw_smallnum

    # draw the sprite for young count
    px := young_label_x
    py := young_label_y
    i := sprite_young_y
    sprite px py 4
    px += 4
    i := sprite_young_n
    sprite px py 4
    px += 4
    i := sprite_young_g
    sprite px py 4


    loop
        # subtract delay
        ticks_since_last_frame := 255
        v1 := delay
        delay := ticks_since_last_frame #reset delay timer using 255
        ticks_since_last_frame -= v1

        # process timers
        i := timers
        load v7

        v0 -= ticks_since_last_frame
        if vf == 0 then v0 := 0
        v1 -= ticks_since_last_frame
        if vf == 0 then v1 := 0
        v2 -= ticks_since_last_frame
        if vf == 0 then v2 := 0
        v3 -= ticks_since_last_frame
        if vf == 0 then v3 := 0
        v4 -= ticks_since_last_frame
        if vf == 0 then v4 := 0
        v5 -= ticks_since_last_frame
        if vf == 0 then v5 := 0

        #update global timer
        v6 += ticks_since_last_frame
        if v6 > 59 begin
            # save old timer value
            vb := v7
            # calculate new timer value
            loop
                v7 -= 1
                v6 -= 60
                if v6 > 59 then again
            i := timers
            save v7
            # check if game is over
            if v7 == 0 begin
                :call game_ending
            end
            # erase old time
            v1 := vb
            px := time_x
            py := time_y
            :call draw_smallnum
            # draw new time
            v1 := v7
            px := time_x
            py := time_y
            :call draw_smallnum
            # register dance to restore vb to original value
            no_erase_flag := 0
            i := timers
            load v7
        end

        # save timers
        i := timers
        save v7

        # process emerson
        if v0 == 0 begin
            vf := OCTO_KEY_Q
            if vf key begin
                # increment resource
                i := count_emerson
                load v7
                current_count += 1
                if current_count > max_resource begin
                    current_count := max_resource
                end
                :call draw_resource
                i := count_emerson
                save v7

                # update cooldown
                i := timers
                load v7
                v0 := 3
                i := timers
                save v7
            end
        end

        # process lake
        if v1 == 0 begin
            vf := OCTO_KEY_W
            if vf key begin
                # make sure user has enough resources
                i := count_emerson
                load v7
                if current_count > 15 begin
                    # update spent resource count
                    if current_count != 99 begin
                        current_count -= 16
                    end

                    #update max resource for spent resource
                    max_resource += 6
                    if max_resource > 99 then max_resource := 99

                    # draw spent resource
                    :call draw_resource
                    i := count_emerson
                    save v7

                    # add to new resource
                    i := count_lake
                    load v7
                    current_count += 1
                    if current_count > max_resource begin
                        current_count := max_resource
                    end

                    # save current state of resource
                    :call draw_resource
                    i := count_lake
                    save v7

                    # check if we should enable next resource
                    if max_resource < 24 begin
                        if current_count > 6 begin
                            i := count_palmer
                            load v7
                            current_count := 1
                            :call draw_resource
                            i := count_palmer
                            save v7
                        end
                    end

                    # update cooldown
                    i := timers
                    load v7
                    v1 := 3
                    i := timers
                    save v7
                end
            end
        end

        # process palmer
        if v2 == 0 begin
            vf := OCTO_KEY_E
            if vf key begin
                # make sure user has enough resources
                i := count_lake
                load v7
                if current_count > 11 begin
                    # update spent resource count
                    if current_count != 99 begin
                        current_count -= 12
                    end

                    #update max resource for spent resource
                    max_resource += 4
                    if max_resource > 99 then max_resource := 99

                    # draw spent resource
                    :call draw_resource
                    i := count_lake
                    save v7

                    # add to new resource
                    i := count_palmer
                    load v7
                    current_count += 1
                    if current_count > max_resource begin
                        current_count := max_resource
                    end

                    # save current state of resource
                    :call draw_resource
                    i := count_palmer
                    save v7

                    # check if we should enable next resource
                    if max_resource < 17 begin
                        if current_count > 6 begin
                            i := count_crosby
                            load v7
                            current_count := 1
                            :call draw_resource
                            i := count_crosby
                            save v7
                        end
                    end

                    # update cooldown
                    i := timers
                    load v7
                    v2 := 2
                    i := timers
                    save v7
                end
            end
        end

        # process crosby
        if v3 == 0 begin
            vf := OCTO_KEY_A
            if vf key begin
                # make sure user has enough resources
                i := count_palmer
                load v7
                if current_count > 10 begin
                    # update spent resource count
                    if current_count != 99 begin
                        current_count -= 11
                    end

                    #update max resource for spent resource
                    max_resource += 3
                    if max_resource > 98 then max_resource := 98

                    # draw spent resource
                    :call draw_resource
                    i := count_palmer
                    save v7

                    # add to new resource
                    i := count_crosby
                    load v7
                    current_count += 1
                    if current_count > max_resource begin
                        current_count := max_resource
                    end

                    # save current state of resource
                    :call draw_resource
                    i := count_crosby
                    save v7

                    # check if we should enable next resource
                    if max_resource < 17 begin
                        if current_count > 6 begin
                            i := count_stills
                            load v7
                            current_count := 1
                            :call draw_resource
                            i := count_stills
                            save v7
                        end
                    end

                    # update cooldown
                    i := timers
                    load v7
                    v3 := 1
                    i := timers
                    save v7
                end
            end
        end

        # process stills
        if v4 == 0 begin
            vf := OCTO_KEY_S
            if vf key begin
                # make sure user has enough resources
                i := count_crosby
                load v7
                if current_count > 10 begin
                    # update spent resource count
                    if current_count != 99 begin
                        current_count -= 9
                    end

                    #update max resource for spent resource
                    max_resource += 3
                    if max_resource > 99 then max_resource := 99

                    # draw spent resource
                    :call draw_resource
                    i := count_crosby
                    save v7

                    # add to new resource
                    i := count_stills
                    load v7
                    current_count += 1
                    if current_count > max_resource begin
                        current_count := max_resource
                    end

                    # save current state of resource
                    :call draw_resource
                    i := count_stills
                    save v7

                    # check if we should enable next resource
                    if max_resource < 24 begin
                        if current_count > 6 begin
                            i := count_nash
                            load v7
                            current_count := 1
                            :call draw_resource
                            i := count_nash
                            save v7
                        end
                    end

                    # update cooldown
                    i := timers
                    load v7
                    v4 := 1
                    i := timers
                    save v7
                end
            end
        end

        # process nash
        if v5 == 0 begin
            vf := OCTO_KEY_D
            if vf key begin
                # make sure user has enough resources
                i := count_stills
                load v7
                if current_count > 4 begin
                    # update spent resource count
                    if current_count != 99 begin
                        current_count -= 5
                    end

                    #update max resource for spent resource
                    max_resource += 2
                    if max_resource > 99 then max_resource := 99

                    # draw spent resource
                    :call draw_resource
                    i := count_stills
                    save v7

                    # add to new resource
                    i := count_nash
                    load v7
                    current_count += 1
                    if current_count > max_resource begin
                        current_count := max_resource
                    end

                    # save current state of resource
                    :call draw_resource
                    i := count_nash
                    save v7

                    # update cooldown
                    i := timers
                    load v7
                    v5 := 1
                    i := timers
                    save v7
                end
            end
        end

        # store result as left operand
        # we have to do some register dancing here to avoid clobbering the delay global
        # value
        va := ticks_since_last_frame
        i := result
        load v9
        i := left_operand
        save v9
        ticks_since_last_frame := va

        # save ticks since last frame as final 3 digits of right operand
        v1 := 7
        i := right_operand
        i += v1
        bcd ticks_since_last_frame

        # process additional score from emerson
        i := count_emerson
        load v0
        if v0 > 63 begin
            v1 := 9
            i := right_operand
            i += v1
            load v0
            v0 += 1
            i := right_operand
            i += v1
            save v0
        end

        # process additional score from crosby
        i := count_crosby
        load v0
        if v0 > 16 begin
            v1 := 8
            i := right_operand
            i += v1
            load v0
            v0 += 1
            i := right_operand
            i += v1
            save v0
        end

        # process additional score from stills
        i := count_stills
        load v0
        if v0 > 4 begin
            v1 := 7
            i := right_operand
            i += v1
            load v0
            v0 += 1
            i := right_operand
            i += v1
            save v0
        end

        # process additional score from nash
        i := count_nash
        load v0
        if v0 > 0 begin
            v2 := v0
            v1 := 6
            i := right_operand
            i += v1
            load v0
            v0 += v2
            i := right_operand
            i += v1
            save v0
        end

        # add timer
        :call add_bignum

        # display new result
        :call draw_bignum

        # copy result to old_result
        i := result
        load v9
        i := old_result
        save v9

        again
